diff --git a/usr/src/sh.c b/usr/src/sh.c
index 35691130ae2a9e3b885ab91241c50f74d83b6cbf..c17d4a71d4c584838e965f2831aded3e71ebd357 100644
--- a/usr/src/sh.c
+++ b/usr/src/sh.c
@@ -29,13 +29,14 @@
 #include <stdlib.h>
 #include <signal.h>
 
-#define TOKEN_NR	10
-#define ARGS_MAX	16
+#define TOKEN_NR 10
+#define ARGS_MAX 16
 
 char tokens[TOKEN_NR][80];
 char prompt[] = "so3% ";
 
-void parse_token(char *str) {
+void parse_token(char *str)
+{
 	int i = 0;
 	char *next_token;
 
@@ -52,73 +53,91 @@ void parse_token(char *str) {
 /*
  * Process the command with the different tokens
  */
-void process_cmd(void) {
-	int i, pid_child, arg_pos;
+void process_cmd(void)
+{
+	int i, pid_child, arg_pos, background;
 	char *argv[ARGS_MAX];
 	char filename[30];
 	int pid, sig;
 
 	/* PRIVATE to SYE team */
 
-	if (!strcmp(tokens[0], "dumpsched")) {
+	if (!strcmp(tokens[0], "dumpsched"))
+	{
 		sys_info(1, 0);
-		return ;
+		return;
 	}
 
-	if (!strcmp(tokens[0], "dumpproc")) {
+	if (!strcmp(tokens[0], "dumpproc"))
+	{
 		sys_info(4, 0);
-		return ;
+		return;
 	}
 
-	if (!strcmp(tokens[0], "exit")) {
-		if (getpid() == 1) {
+	if (!strcmp(tokens[0], "exit"))
+	{
+		if (getpid() == 1)
+		{
 			printf("The shell root process can not be terminated...\n");
-			return ;
-		} else
+			return;
+		}
+		else
 			exit(0);
 
 		/* If the shell is the root shell, there is a failure on exit() */
-		return ;
+		return;
 	}
 
 	/* end of PRIVATE */
 
 	/* setenv */
-	if (!strcmp(tokens[0], "setenv")) {
+	if (!strcmp(tokens[0], "setenv"))
+	{
 		/* second arg present ? */
-		if (tokens[1][0] != 0) {
+		if (tokens[1][0] != 0)
+		{
 			/* third arg present ? */
-			if (tokens[2][0] != 0) {
+			if (tokens[2][0] != 0)
+			{
 				/* Set the env. var. (always overwrite) */
 				setenv(tokens[1], tokens[2], 1);
-			} else
+			}
+			else
 				unsetenv(tokens[1]);
 		}
-		return ;
+		return;
 	}
 
 	/* env */
-	if (!strcmp(tokens[0], "env")) {
+	if (!strcmp(tokens[0], "env"))
+	{
 		/* This function print the environment vars */
 		for (i = 0; __environ[i] != NULL; i++)
 			printf("%s\n", __environ[i]);
 
-		return ;
+		return;
 	}
 
 	/* kill */
-	if (!strcmp(tokens[0], "kill")) {
+	if (!strcmp(tokens[0], "kill"))
+	{
 		/* Send a signal to a process */
 		sig = 0;
 
-		if (tokens[2][0] == 0) {
+		if (tokens[2][0] == 0)
+		{
 			sig = SIGTERM;
 			pid = atoi(tokens[1]);
-		} else {
-			if (!strcmp(tokens[1], "-USR1")) {
+		}
+		else
+		{
+			if (!strcmp(tokens[1], "-USR1"))
+			{
 				sig = SIGUSR1;
 				pid = atoi(tokens[2]);
-			} else if (!strcmp(tokens[1], "-9")) {
+			}
+			else if (!strcmp(tokens[1], "-9"))
+			{
 				sig = SIGKILL;
 				pid = atoi(tokens[2]);
 			}
@@ -126,14 +145,22 @@ void process_cmd(void) {
 
 		kill(pid, sig);
 
-		return ;
+		return;
 	}
 
 	/* General case - prepare to launch the application */
 
 	/* Prepare the arguments to be passed to exec() syscall */
 	arg_pos = 0;
-	while (tokens[arg_pos][0] != 0) {
+	background = 0;
+	while (tokens[arg_pos][0] != 0)
+	{
+		if (strcmp(tokens[arg_pos], "&") == 0)
+		{
+			background = 1;
+			break;
+		}
+
 		argv[arg_pos] = tokens[arg_pos];
 		arg_pos++;
 	}
@@ -141,7 +168,8 @@ void process_cmd(void) {
 	argv[arg_pos] = NULL;
 
 	pid_child = fork();
-	if (!pid_child) { /* Execution in the child */
+	if (!pid_child)
+	{ /* Execution in the child */
 
 		strcpy(filename, tokens[0]);
 		argv[0] = tokens[0];
@@ -149,21 +177,31 @@ void process_cmd(void) {
 		/* We are looking for an executable with .elf extension */
 		strcat(filename, ".elf");
 
-		if (execv(filename, argv) == -1) {
+		if (execv(filename, argv) == -1)
+		{
 			printf("%s: exec failed.\n", argv[0]);
 			exit(-1);
 		}
+	}
+	else
+	{ /* Execution in the parent */
 
-	} else { /* Execution in the parent */
-
-		waitpid(pid_child, NULL, 0);
+		if (!background)
+		{
+			waitpid(pid_child, NULL, 0);
+		}
+		else
+		{
+			printf("[%d]", pid_child);
+		}
 	}
 }
 
 /*
  * Ignore the SIGINT signal, but we re-display the prompt to be elegant ;-)
  */
-void sigint_sh_handler(int sig) {
+void sigint_sh_handler(int sig)
+{
 
 	printf("%s", prompt);
 	fflush(stdout);
@@ -182,7 +220,8 @@ void main(int argc, char *argv[])
 	sa.sa_handler = sigint_sh_handler;
 	sigaction(SIGINT, &sa, NULL);
 
-	while (1) {
+	while (1)
+	{
 		/* Reset all tokens */
 		for (i = 0; i < TOKEN_NR; i++)
 			tokens[i][0] = 0;
@@ -198,7 +237,5 @@ void main(int argc, char *argv[])
 		/* Check if there is at least one token to be processed */
 		if (tokens[0][0] != 0)
 			process_cmd();
-
-
 	}
 }
